{"ast":null,"code":"import _toConsumableArray from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{Modal,Form,Button}from'react-bootstrap';import{useContacts}from'../contexts/ContactsProvider';import{useConversation}from'../contexts/ConversationProvider';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function ConversationModal(_ref){var closeShow=_ref.closeShow;var contacts=useContacts();var convers=useConversation();console.log(convers);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedContacts=_useState2[0],setSelectedContacts=_useState2[1];var createNewConversation=function createNewConversation(e){e.preventDefault();convers.createConversation(selectedContacts);closeShow();};var handleCheckConversation=function handleCheckConversation(id){if(selectedContacts.includes(id)){setSelectedContacts(function(prev){return prev.filter(function(idNotCheck){return idNotCheck!==id;});});}else{setSelectedContacts(function(prev){return[].concat(_toConsumableArray(prev),[id]);});}};console.log(selectedContacts);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:\"Create new Conversation\"}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(Form,{onSubmit:createNewConversation,children:[/*#__PURE__*/_jsx(Form.Group,{children:contacts.contacts.map(function(contact){return/*#__PURE__*/_jsx(Form.Group,{controlId:contact.id,children:/*#__PURE__*/_jsx(Form.Check,{children:/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",label:contact.username,onChange:function onChange(){return handleCheckConversation(contact.id);}})})});})}),/*#__PURE__*/_jsx(Button,{onClick:createNewConversation,className:\"mt-3\",children:\"Create\"})]})})]});}","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ConversationModal.jsx"],"names":["React","useState","Modal","Form","Button","useContacts","useConversation","ConversationModal","closeShow","contacts","convers","console","log","selectedContacts","setSelectedContacts","createNewConversation","e","preventDefault","createConversation","handleCheckConversation","id","includes","prev","filter","idNotCheck","map","contact","username"],"mappings":"wQAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,OAASC,KAAT,CAAgBC,IAAhB,CAAsBC,MAAtB,KAAoC,iBAApC,CACA,OAASC,WAAT,KAA4B,8BAA5B,CACA,OAASC,eAAT,KAAgC,kCAAhC,C,6IAEA,cAAe,SAASC,CAAAA,iBAAT,MAAwC,IAAZC,CAAAA,SAAY,MAAZA,SAAY,CACrD,GAAMC,CAAAA,QAAQ,CAAGJ,WAAW,EAA5B,CACA,GAAMK,CAAAA,OAAO,CAAGJ,eAAe,EAA/B,CACAK,OAAO,CAACC,GAAR,CAAYF,OAAZ,EACA,cAA+CT,QAAQ,CAAC,EAAD,CAAvD,wCAAOY,gBAAP,eAAwBC,mBAAxB,eACA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,CAAD,CAAO,CACnCA,CAAC,CAACC,cAAF,GACAP,OAAO,CAACQ,kBAAR,CAA2BL,gBAA3B,EACAL,SAAS,GACV,CAJD,CAKA,GAAMW,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,EAAD,CAAQ,CACtC,GAAIP,gBAAgB,CAACQ,QAAjB,CAA0BD,EAA1B,CAAJ,CAAkC,CAChCN,mBAAmB,CAAC,SAAAQ,IAAI,QAAIA,CAAAA,IAAI,CAACC,MAAL,CAAY,SAACC,UAAD,QAAeA,CAAAA,UAAU,GAAKJ,EAA9B,EAAZ,CAAJ,EAAL,CAAnB,CACD,CAFD,IAGI,CACFN,mBAAmB,CAAC,SAAAQ,IAAI,qCAAQA,IAAR,GAAcF,EAAd,IAAL,CAAnB,CACD,CACF,CAPD,CAQAT,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EACA,mBACE,wCACA,KAAC,KAAD,CAAO,MAAP,EAAc,WAAW,CAAE,IAA3B,qCADA,cAEA,KAAC,KAAD,CAAO,IAAP,wBACE,MAAC,IAAD,EAAM,QAAQ,CAAEE,qBAAhB,wBACE,KAAC,IAAD,CAAM,KAAN,WACGN,QAAQ,CAACA,QAAT,CAAkBgB,GAAlB,CAAsB,SAACC,OAAD,CAAa,CAClC,mBACE,KAAC,IAAD,CAAM,KAAN,EAAY,SAAS,CAAEA,OAAO,CAACN,EAA/B,uBACE,KAAC,IAAD,CAAM,KAAN,wBACE,KAAC,IAAD,CAAM,KAAN,EAAY,IAAI,CAAC,UAAjB,CAA4B,KAAK,CAAEM,OAAO,CAACC,QAA3C,CAAqD,QAAQ,CAAE,0BAAMR,CAAAA,uBAAuB,CAACO,OAAO,CAACN,EAAT,CAA7B,EAA/D,EADF,EADF,EADF,CAOD,CARA,CADH,EADF,cAYE,KAAC,MAAD,EAAQ,OAAO,CAAEL,qBAAjB,CAAwC,SAAS,CAAC,MAAlD,oBAZF,GADF,EAFA,GADF,CAuBD","sourcesContent":["import React, {useState} from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useContacts } from '../contexts/ContactsProvider';\nimport { useConversation } from '../contexts/ConversationProvider';\n\nexport default function ConversationModal({closeShow}) {\n  const contacts = useContacts();\n  const convers = useConversation();\n  console.log(convers);\n  const [selectedContacts,setSelectedContacts] = useState([]);\n  const createNewConversation = (e) => {\n    e.preventDefault();\n    convers.createConversation(selectedContacts);\n    closeShow();\n  }\n  const handleCheckConversation = (id) => {\n    if (selectedContacts.includes(id)){\n      setSelectedContacts(prev => prev.filter((idNotCheck)=> idNotCheck !== id));\n    }\n    else{\n      setSelectedContacts(prev => [...prev, id]);\n    }\n  }\n  console.log(selectedContacts);\n  return (\n    <>\n    <Modal.Header closeButton={true}>Create new Conversation</Modal.Header>\n    <Modal.Body>\n      <Form onSubmit={createNewConversation}>\n        <Form.Group>\n          {contacts.contacts.map((contact) => {\n            return (\n              <Form.Group controlId={contact.id}>\n                <Form.Check>\n                  <Form.Check type=\"checkbox\" label={contact.username} onChange={() => handleCheckConversation(contact.id)} />\n                </Form.Check>\n              </Form.Group>\n            )\n          })}\n        </Form.Group>\n        <Button onClick={createNewConversation} className=\"mt-3\">\n            Create\n        </Button>\n    </Form>\n    </Modal.Body>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}