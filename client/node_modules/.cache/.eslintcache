[{"/Users/ducdoan2002/Desktop/chat-app/client/src/index.js":"1","/Users/ducdoan2002/Desktop/chat-app/client/src/components/App.jsx":"2","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Login.jsx":"3","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Dashboard.jsx":"4","/Users/ducdoan2002/Desktop/chat-app/client/src/customHooks/useLocalStorage.js":"5","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Sidebar.jsx":"6","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Conversations.jsx":"7","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Contact.jsx":"8","/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx":"9","/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ConversationModal.jsx":"10","/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ContactModal.jsx":"11","/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx":"12","/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx":"13","/Users/ducdoan2002/Desktop/chat-app/client/src/components/SocketProvider.jsx":"14"},{"size":276,"mtime":1648270627654,"results":"15","hashOfConfig":"16"},{"size":877,"mtime":1653264575876,"results":"17","hashOfConfig":"16"},{"size":1291,"mtime":1652414541404,"results":"18","hashOfConfig":"16"},{"size":556,"mtime":1653085340572,"results":"19","hashOfConfig":"16"},{"size":1375,"mtime":1652596853540,"results":"20","hashOfConfig":"16"},{"size":2463,"mtime":1653085627545,"results":"21","hashOfConfig":"16"},{"size":791,"mtime":1652931565227,"results":"22","hashOfConfig":"16"},{"size":431,"mtime":1652931580980,"results":"23","hashOfConfig":"16"},{"size":701,"mtime":1652595169582,"results":"24","hashOfConfig":"16"},{"size":1557,"mtime":1652973422134,"results":"25","hashOfConfig":"16"},{"size":1316,"mtime":1652671007153,"results":"26","hashOfConfig":"16"},{"size":4826,"mtime":1653362425786,"results":"27","hashOfConfig":"16"},{"size":3554,"mtime":1653350884116,"results":"28","hashOfConfig":"16"},{"size":825,"mtime":1653364722241,"results":"29","hashOfConfig":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"149u5cd",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mnivhc","/Users/ducdoan2002/Desktop/chat-app/client/src/index.js",[],[],["77","78"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/App.jsx",["79"],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Login.jsx",["80"],[],"import React, {useRef, useEffect} from 'react';\nimport {Button, Container, Form} from \"react-bootstrap\";\nimport {v4 as uuidV4} from 'uuid';\n\nexport default function Login(props) {\n  const userId = useRef();\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   //value from Form.Control\n  //   props.onIdSubmit(userId.current.value);\n  //   console.log(\"Submit\");\n  // }\n\n  const createId = () => {\n    props.onIdSubmit(uuidV4());\n  }\n  return (\n    <Container className=\"d-flex align-items-center justify-content-center\" style={{height: \"100vh\"}}>\n        <Form /*onSubmit={handleSubmit}*/>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>ID</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter ID\" ref = {userId}/>\n                <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n                </Form.Text>\n            </Form.Group>\n            {/* uncomment type = submit to submit the form + trigger onSubmit */}\n            <Button /*type=\"submit\"*/ className=\"me-2\">\n              Log In\n            </Button>\n            <Button variant=\"secondary\" onClick={createId}>\n              Create a new account\n            </Button>\n        </Form>\n    </Container>\n  )\n}\n","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Dashboard.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/customHooks/useLocalStorage.js",["81"],[],"import React, {useEffect, useState} from 'react'\n\nconst PREFIX = \"chat-app-clone-\";\n/*\n    useLocalStorage is a custom Hook of useState\n*/\n//key is where the thing you store in localStorange. (to put it to the prefixKey -> find the correct value)\n//initialValue is the parameter that you pass to useState (could be as a function or just a variable)\n\nexport default function useLocalStorage(key, initialValue) {\n    //read from localStorage + store data to our state\n    let prefixKey = PREFIX + key;\n    const [value, setValue] = useState(()=>{\n        //get the value on localStorage \n        const jsonVal = localStorage.getItem(prefixKey);\n        //every return below are all for set the value [value, setValue] initially\n        if (jsonVal != null){\n            return JSON.parse(jsonVal);         \n        }\n        //passing function to initialValue (useState(()=>{})) \n        if (typeof(initialValue) === \"function\"){\n            return initialValue();\n        }else{\n            return initialValue;\n        }\n    });\n\n    //get value(state) and save to the localStorage\n    useEffect(()=>{\n        //set the value you want to store to localStorage\n        if (value){\n            //stringify here to make JS becomes JSON data\n            localStorage.setItem(prefixKey, JSON.stringify(value));\n        }\n    }, [prefixKey,value])\n\n    return [value, setValue];\n}\n","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Sidebar.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Conversations.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Contact.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ConversationModal.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ContactModal.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx",["82","83","84"],[],"import React, {useContext, useEffect, useCallback} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from '../SocketProvider';\n\nconst ConversationContext = React.createContext();\n\n//small custom Hook\nexport const useConversation = () => {\n    return useContext(ConversationContext);\n}\n\nexport default function ConversationProvider({id, children}) {\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = React.useState(0);\n    //storing a new Contact the the state contacts\n    const createConversation = (selectedUser) => {\n        setConversations(prev => [...prev, {selectedUser, message: []}]);\n    }\n    //get all contacts\n    const allContacts = useContacts();\n    //get the socket \n    const socket = useSocket();\n\n\n    //add new recipient property to each conversation in conversations\n    console.log(conversations);\n    const formatConversations = conversations.map((conver, index)=>{\n        //format the contact to display on the page\n        const recipient = conver.selectedUser.map((user)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === user){\n                    return contact;\n                }\n            })\n            const name = contact ? contact.username : user;\n            return {id: user, username: name};\n        })\n        //format the message to display on the page (add fromMe + senderName props to each message object)\n        const formatMessage = conver.message.map((mes)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === mes.sender){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : mes.sender;\n            const fromMe = (mes.sender === id);\n            return {...mes, senderName: name, fromMe};\n        })\n        //update old form message to new formatMessage\n        conver.message = formatMessage;\n        let selected = (index === selectedConversationIndex);\n        return {...conver, recipient, selected};\n    });\n\n    //ultility:\n    const matchRecipient = (arr1, arr2) => {\n        arr1.sort();\n        arr2.sort();\n        if (arr1.length !== arr2.length){\n            return false;\n        }\n        for (let i = 0; i<arr1.length; i++){\n            if (arr1[i] !== arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const addMessageToConversation = useCallback(({recipient, text, sender}) => {\n        //recipient = a list of user Id, text = text input,sender = user with current Id\n        console.log({recipient, text, sender});\n        setConversations(prev => {\n            let matchConversation = false;\n            //each message just need the sender and the text content\n            const newMessage = {sender, text};\n            let newConversations = conversations.map((conver) => {\n                if (matchRecipient(conver.selectedUser, recipient)){\n                    matchConversation = true;\n                    return {...conver, message: [...conver.message, newMessage]}\n                }\n                return conver;\n            })\n            if (matchConversation){\n                return newConversations;\n            }\n            else{\n                return [...prev, {selectedUser: recipient, message: [newMessage]}]\n            }\n        })\n    }, [conversations, setConversations])\n    \n    //to control when to trigger socket on receive-message event\n    useEffect(() => {\n        if (socket == null) return;\n        socket.on('receive-message', addMessageToConversation);\n        console.log(conversations);              \n        return () => {\n            //remove all listeners in this receive-message event\n            socket.off('receive-message');\n        };\n    }, [socket, addMessageToConversation]);\n\n    const sendMessage = (recipient,text) => {\n        socket.emit('send-message', {recipient, text});\n        addMessageToConversation({recipient, text, sender: id});\n    }\n\n    //the final value that ConversationContext.Provider holds\n    const output = {\n        //all conversations\n        conversations: formatConversations, \n        //one selected conversation \n        selectedConversation: formatConversations[selectedConversationIndex], \n        //change the selected conversation\n        setSelectedConversationIndex, \n        //create new conversation\n        createConversation,\n        //to store a message to the conversation\n        sendMessage\n    }\n\n    return (\n        <ConversationContext.Provider value={output}>\n            {children}\n        </ConversationContext.Provider>\n    )\n}\n","/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/SocketProvider.jsx",[],[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":16,"nodeType":"91","messageId":"92","endLine":1,"endColumn":24},{"ruleId":"89","severity":1,"message":"93","line":1,"column":24,"nodeType":"91","messageId":"92","endLine":1,"endColumn":33},{"ruleId":"89","severity":1,"message":"94","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":31,"column":63,"nodeType":"97","messageId":"98","endLine":31,"endColumn":65},{"ruleId":"95","severity":1,"message":"96","line":41,"column":63,"nodeType":"97","messageId":"98","endLine":41,"endColumn":65},{"ruleId":"99","severity":1,"message":"100","line":103,"column":8,"nodeType":"101","endLine":103,"endColumn":42,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'React' is defined but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'conversations'. Either include it or remove the dependency array.","ArrayExpression",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [socket, addMessageToConversation, conversations]",{"range":"108","text":"109"},[3984,4018],"[socket, addMessageToConversation, conversations]"]