{"ast":null,"code":"import _assertThisInitialized from \"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\n\nfunction empty() {}\n\nvar hasXHR2 = function () {\n  var xhr = new XMLHttpRequest({\n    xdomain: false\n  });\n  return null != xhr.responseType;\n}();\n\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n\n  var _super = _createSuper(Polling);\n\n  /**\n   * XHR Polling constructor.\n   *\n   * @param {Object} opts\n   * @api public\n   */\n  function Polling(opts) {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.call(this, opts);\n    _this.polling = false;\n\n    if (typeof location !== \"undefined\") {\n      var isSSL = \"https:\" === location.protocol;\n      var port = location.port; // some user agents have empty `location.port`\n\n      if (!port) {\n        port = isSSL ? \"443\" : \"80\";\n      }\n\n      _this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n      _this.xs = opts.secure !== isSSL;\n    }\n    /**\n     * XHR supports binary\n     */\n\n\n    var forceBase64 = opts && opts.forceBase64;\n    _this.supportsBinary = hasXHR2 && !forceBase64;\n    return _this;\n  }\n  /**\n   * Transport name.\n   */\n\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n\n      this.readyState = \"pausing\";\n\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n\n      if (this.polling || !this.writable) {\n        var total = 0;\n\n        if (this.polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      this.polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        } // if its a close packet, we close the ongoing requests\n\n\n        if (\"close\" === packet.type) {\n          _this3.onClose({\n            description: \"transport closed by the server\"\n          });\n\n          return false;\n        } // otherwise bypass onData and handle the message\n\n\n        _this3.onPacket(packet);\n      }; // decode payload\n\n\n      decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emitReserved(\"pollComplete\");\n\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n\n          _this5.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\"; // cache busting is forced\n\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      } // avoid port if default for schema\n\n\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      var encodedQuery = encode(query);\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.assign(opts, {\n        xd: this.xd,\n        xs: this.xs\n      }, this.opts);\n      return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n\n  }, {\n    key: \"doWrite\",\n    value: function doWrite(data, fn) {\n      var _this6 = this;\n\n      var req = this.request({\n        method: \"POST\",\n        data: data\n      });\n      req.on(\"success\", fn);\n      req.on(\"error\", function (xhrStatus, context) {\n        _this6.onError(\"xhr post error\", xhrStatus, context);\n      });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doPoll\",\n    value: function doPoll() {\n      var _this7 = this;\n\n      var req = this.request();\n      req.on(\"data\", this.onData.bind(this));\n      req.on(\"error\", function (xhrStatus, context) {\n        _this7.onError(\"xhr poll error\", xhrStatus, context);\n      });\n      this.pollXhr = req;\n    }\n  }]);\n\n  return Polling;\n}(Transport);\nexport var Request = /*#__PURE__*/function (_Emitter) {\n  _inherits(Request, _Emitter);\n\n  var _super2 = _createSuper(Request);\n\n  /**\n   * Request constructor\n   *\n   * @param {Object} options\n   * @api public\n   */\n  function Request(uri, opts) {\n    var _this8;\n\n    _classCallCheck(this, Request);\n\n    _this8 = _super2.call(this);\n    installTimerFunctions(_assertThisInitialized(_this8), opts);\n    _this8.opts = opts;\n    _this8.method = opts.method || \"GET\";\n    _this8.uri = uri;\n    _this8.async = false !== opts.async;\n    _this8.data = undefined !== opts.data ? opts.data : null;\n\n    _this8.create();\n\n    return _this8;\n  }\n  /**\n   * Creates the XHR object and sends the request.\n   *\n   * @api private\n   */\n\n\n  _createClass(Request, [{\n    key: \"create\",\n    value: function create() {\n      var _this9 = this;\n\n      var opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n      opts.xdomain = !!this.opts.xd;\n      opts.xscheme = !!this.opts.xs;\n      var xhr = this.xhr = new XMLHttpRequest(opts);\n\n      try {\n        xhr.open(this.method, this.uri, this.async);\n\n        try {\n          if (this.opts.extraHeaders) {\n            xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n            for (var i in this.opts.extraHeaders) {\n              if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n              }\n            }\n          }\n        } catch (e) {}\n\n        if (\"POST\" === this.method) {\n          try {\n            xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n          } catch (e) {}\n        }\n\n        try {\n          xhr.setRequestHeader(\"Accept\", \"*/*\");\n        } catch (e) {} // ie6 check\n\n\n        if (\"withCredentials\" in xhr) {\n          xhr.withCredentials = this.opts.withCredentials;\n        }\n\n        if (this.opts.requestTimeout) {\n          xhr.timeout = this.opts.requestTimeout;\n        }\n\n        xhr.onreadystatechange = function () {\n          if (4 !== xhr.readyState) return;\n\n          if (200 === xhr.status || 1223 === xhr.status) {\n            _this9.onLoad();\n          } else {\n            // make sure the `error` event handler that's user-set\n            // does not throw in the same tick and gets caught here\n            _this9.setTimeoutFn(function () {\n              _this9.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n            }, 0);\n          }\n        };\n\n        xhr.send(this.data);\n      } catch (e) {\n        // Need to defer since .create() is called directly from the constructor\n        // and thus the 'error' event can only be only bound *after* this exception\n        // occurs.  Therefore, also, we cannot throw here at all.\n        this.setTimeoutFn(function () {\n          _this9.onError(e);\n        }, 0);\n        return;\n      }\n\n      if (typeof document !== \"undefined\") {\n        this.index = Request.requestsCount++;\n        Request.requests[this.index] = this;\n      }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      this.emitReserved(\"error\", err, this.xhr);\n      this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(fromError) {\n      if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n        return;\n      }\n\n      this.xhr.onreadystatechange = empty;\n\n      if (fromError) {\n        try {\n          this.xhr.abort();\n        } catch (e) {}\n      }\n\n      if (typeof document !== \"undefined\") {\n        delete Request.requests[this.index];\n      }\n\n      this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onLoad\",\n    value: function onLoad() {\n      var data = this.xhr.responseText;\n\n      if (data !== null) {\n        this.emitReserved(\"data\", data);\n        this.emitReserved(\"success\");\n        this.cleanup();\n      }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.cleanup();\n    }\n  }]);\n\n  return Request;\n}(Emitter);\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nif (typeof document !== \"undefined\") {\n  // @ts-ignore\n  if (typeof attachEvent === \"function\") {\n    // @ts-ignore\n    attachEvent(\"onunload\", unloadHandler);\n  } else if (typeof addEventListener === \"function\") {\n    var terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n    addEventListener(terminationEvent, unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/node_modules/engine.io-client/build/esm/transports/polling.js"],"names":["Transport","yeast","encode","encodePayload","decodePayload","XHR","XMLHttpRequest","Emitter","installTimerFunctions","pick","globalThisShim","globalThis","empty","hasXHR2","xhr","xdomain","responseType","Polling","opts","polling","location","isSSL","protocol","port","xd","hostname","xs","secure","forceBase64","supportsBinary","poll","onPause","readyState","pause","writable","total","once","doPoll","emitReserved","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","close","write","packets","doWrite","query","schema","timestampRequests","timestampParam","sid","b64","Number","encodedQuery","ipv6","indexOf","path","length","Object","assign","Request","uri","fn","req","request","method","on","xhrStatus","context","onError","onData","bind","pollXhr","async","undefined","create","xscheme","open","extraHeaders","setDisableHeaderCheck","i","hasOwnProperty","setRequestHeader","e","withCredentials","requestTimeout","timeout","onreadystatechange","status","onLoad","setTimeoutFn","send","document","index","requestsCount","requests","err","cleanup","fromError","abort","responseText","attachEvent","unloadHandler","addEventListener","terminationEvent"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nimport { XHR as XMLHttpRequest } from \"./xmlhttprequest.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globalThis.js\";\nfunction empty() { }\nconst hasXHR2 = (function () {\n    const xhr = new XMLHttpRequest({\n        xdomain: false\n    });\n    return null != xhr.responseType;\n})();\nexport class Polling extends Transport {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.polling = false;\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n            this.xs = opts.secure !== isSSL;\n        }\n        /**\n         * XHR supports binary\n         */\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Creates a request.\n     *\n     * @param {String} method\n     * @api private\n     */\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);\n        return new Request(this.uri(), opts);\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @api private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @api private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @api public\n     */\n    constructor(uri, opts) {\n        super();\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.method = opts.method || \"GET\";\n        this.uri = uri;\n        this.async = false !== opts.async;\n        this.data = undefined !== opts.data ? opts.data : null;\n        this.create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @api private\n     */\n    create() {\n        const opts = pick(this.opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this.opts.xd;\n        opts.xscheme = !!this.opts.xs;\n        const xhr = (this.xhr = new XMLHttpRequest(opts));\n        try {\n            xhr.open(this.method, this.uri, this.async);\n            try {\n                if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this.opts.extraHeaders) {\n                        if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this.method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this.opts.withCredentials;\n            }\n            if (this.opts.requestTimeout) {\n                xhr.timeout = this.opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this.onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this.data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this.onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this.index = Request.requestsCount++;\n            Request.requests[this.index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @api private\n     */\n    onError(err) {\n        this.emitReserved(\"error\", err, this.xhr);\n        this.cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @api private\n     */\n    cleanup(fromError) {\n        if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n            return;\n        }\n        this.xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this.xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this.index];\n        }\n        this.xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @api private\n     */\n    onLoad() {\n        const data = this.xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this.cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @api public\n     */\n    abort() {\n        this.cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}