{"ast":null,"code":"var _jsxFileName = \"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactsContext = /*#__PURE__*/React.createContext(); //small custom Hook\n\nexport const useContacts = () => {\n  _s();\n\n  return useContext(ContactsContext);\n};\n\n_s(useContacts, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ContactsProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [contacts, setContacts] = useLocalStorage('contacts', []); //storing a new Contact the the state contacts\n\n  const storeNewContacts = (id, username) => {\n    setContacts(prev => {\n      return [...prev, {\n        id,\n        username\n      }];\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContactsContext.Provider, {\n    value: {\n      contacts,\n      storeNewContacts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ContactsProvider, \"aWfzfaPwLedoIhPywC4kgPBb+0k=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = ContactsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsProvider\");","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx"],"names":["React","useContext","useLocalStorage","ContactsContext","createContext","useContacts","ContactsProvider","children","contacts","setContacts","storeNewContacts","id","username","prev"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mCAA5B;;AAEA,MAAMC,eAAe,gBAAGH,KAAK,CAACI,aAAN,EAAxB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,SAAOJ,UAAU,CAACE,eAAD,CAAjB;AACH,CAFM;;GAAME,W;;AAKb,eAAe,SAASC,gBAAT,OAAsC;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AACjD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,eAAe,CAAC,UAAD,EAAa,EAAb,CAA/C,CADiD,CAEjD;;AACA,QAAMQ,gBAAgB,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB;AACvCH,IAAAA,WAAW,CAACI,IAAI,IAAI;AAAC,aAAO,CAAC,GAAGA,IAAJ,EAAU;AAACF,QAAAA,EAAD;AAAKC,QAAAA;AAAL,OAAV,CAAP;AAAiC,KAA3C,CAAX;AACH,GAFD;;AAGA,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAACJ,MAAAA,QAAD;AAAWE,MAAAA;AAAX,KAAjC;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IAXuBD,gB;UACYJ,e;;;KADZI,gB","sourcesContent":["import React, {useContext} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\n\nconst ContactsContext = React.createContext();\n\n//small custom Hook\nexport const useContacts = () => {\n    return useContext(ContactsContext);\n}\n\n\nexport default function ContactsProvider({children}) {\n    const [contacts, setContacts] = useLocalStorage('contacts', []);\n    //storing a new Contact the the state contacts\n    const storeNewContacts = (id, username) => {\n        setContacts(prev => {return [...prev, {id, username}]});\n    }\n    return (\n        <ContactsContext.Provider value={{contacts, storeNewContacts}}>\n            {children}\n        </ContactsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}