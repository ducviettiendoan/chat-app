{"ast":null,"code":"import _objectSpread from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useContext,useEffect,useCallback}from'react';import useLocalStorage from'../../customHooks/useLocalStorage';import{useContacts}from'./ContactsProvider';import{useSocket}from'../SocketProvider';import{jsx as _jsx}from\"react/jsx-runtime\";var ConversationContext=/*#__PURE__*/React.createContext();//small custom Hook\nexport var useConversation=function useConversation(){return useContext(ConversationContext);};export default function ConversationProvider(_ref){var id=_ref.id,children=_ref.children;var _useLocalStorage=useLocalStorage('conversations',[]),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),conversations=_useLocalStorage2[0],setConversations=_useLocalStorage2[1];var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),selectedConversationIndex=_React$useState2[0],setSelectedConversationIndex=_React$useState2[1];//storing a new Contact the the state contacts\nvar createConversation=function createConversation(selectedUser){setConversations(function(prev){return[].concat(_toConsumableArray(prev),[{selectedUser:selectedUser,message:[]}]);});};//get all contacts\nvar allContacts=useContacts();//get the socket \nvar socket=useSocket();//add new recipient property to each conversation in conversations\nconsole.log(conversations);var formatConversations=conversations.map(function(conver,index){//format the contact to display on the page\nvar recipient=conver.selectedUser.map(function(user){var contact=allContacts.contacts.find(function(contact){if(contact.id===user){return contact;}});var name=contact?contact.username:user;return{id:user,username:name};});//format the message to display on the page (add fromMe + senderName props to each message object)\nvar formatMessage=conver.message.map(function(mes){var contact=allContacts.contacts.find(function(contact){if(contact.id===mes.sender){return contact;};});var name=contact?contact.username:mes.sender;var fromMe=mes.sender===id;return _objectSpread(_objectSpread({},mes),{},{senderName:name,fromMe:fromMe});});//update old form message to new formatMessage\nconver.message=formatMessage;var selected=index===selectedConversationIndex;return _objectSpread(_objectSpread({},conver),{},{recipient:recipient,selected:selected});});//ultility:\nvar matchRecipient=function matchRecipient(arr1,arr2){arr1.sort();arr2.sort();if(arr1.length!==arr2.length){return false;}for(var i=0;i<arr1.length;i++){if(arr1[i]!==arr2[i]){return false;}}return true;};var addMessageToConversation=useCallback(function(_ref2){var recipient=_ref2.recipient,text=_ref2.text,sender=_ref2.sender;//recipient = a list of user Id, text = text input,sender = user with current Id\nconsole.log({recipient:recipient,text:text,sender:sender});setConversations(function(prev){var matchConversation=false;//each message just need the sender and the text content\nvar newMessage={sender:sender,text:text};var newConversations=conversations.map(function(conver){if(matchRecipient(conver.selectedUser,recipient)){matchConversation=true;return _objectSpread(_objectSpread({},conver),{},{message:[].concat(_toConsumableArray(conver.message),[newMessage])});}return conver;});if(matchConversation){return newConversations;}else{return[].concat(_toConsumableArray(prev),[{selectedUser:recipient,message:[newMessage]}]);}});},[conversations,setConversations]);//to control when to trigger socket on receive-message event\nuseEffect(function(){if(socket==null)return;socket.on('receive-message',addMessageToConversation);console.log(conversations);return function(){//remove all listeners in this receive-message event\nsocket.off('receive-message');};},[socket,addMessageToConversation]);var sendMessage=function sendMessage(recipient,text){socket.emit('send-message',{recipient:recipient,text:text});addMessageToConversation({recipient:recipient,text:text,sender:id});};//the final value that ConversationContext.Provider holds\nvar output={//all conversations\nconversations:formatConversations,//one selected conversation \nselectedConversation:formatConversations[selectedConversationIndex],//change the selected conversation\nsetSelectedConversationIndex:setSelectedConversationIndex,//create new conversation\ncreateConversation:createConversation,//to store a message to the conversation\nsendMessage:sendMessage};return/*#__PURE__*/_jsx(ConversationContext.Provider,{value:output,children:children});}","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx"],"names":["React","useContext","useEffect","useCallback","useLocalStorage","useContacts","useSocket","ConversationContext","createContext","useConversation","ConversationProvider","id","children","conversations","setConversations","useState","selectedConversationIndex","setSelectedConversationIndex","createConversation","selectedUser","prev","message","allContacts","socket","console","log","formatConversations","map","conver","index","recipient","user","contact","contacts","find","name","username","formatMessage","mes","sender","fromMe","senderName","selected","matchRecipient","arr1","arr2","sort","length","i","addMessageToConversation","text","matchConversation","newMessage","newConversations","on","off","sendMessage","emit","output","selectedConversation"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useCallback} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from '../SocketProvider';\n\nconst ConversationContext = React.createContext();\n\n//small custom Hook\nexport const useConversation = () => {\n    return useContext(ConversationContext);\n}\n\nexport default function ConversationProvider({id, children}) {\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = React.useState(0);\n    //storing a new Contact the the state contacts\n    const createConversation = (selectedUser) => {\n        setConversations(prev => [...prev, {selectedUser, message: []}]);\n    }\n    //get all contacts\n    const allContacts = useContacts();\n    //get the socket \n    const socket = useSocket();\n\n\n    //add new recipient property to each conversation in conversations\n    console.log(conversations);\n    const formatConversations = conversations.map((conver, index)=>{\n        //format the contact to display on the page\n        const recipient = conver.selectedUser.map((user)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === user){\n                    return contact;\n                }\n            })\n            const name = contact ? contact.username : user;\n            return {id: user, username: name};\n        })\n        //format the message to display on the page (add fromMe + senderName props to each message object)\n        const formatMessage = conver.message.map((mes)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === mes.sender){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : mes.sender;\n            const fromMe = (mes.sender === id);\n            return {...mes, senderName: name, fromMe};\n        })\n        //update old form message to new formatMessage\n        conver.message = formatMessage;\n        let selected = (index === selectedConversationIndex);\n        return {...conver, recipient, selected};\n    });\n\n    //ultility:\n    const matchRecipient = (arr1, arr2) => {\n        arr1.sort();\n        arr2.sort();\n        if (arr1.length !== arr2.length){\n            return false;\n        }\n        for (let i = 0; i<arr1.length; i++){\n            if (arr1[i] !== arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const addMessageToConversation = useCallback(({recipient, text, sender}) => {\n        //recipient = a list of user Id, text = text input,sender = user with current Id\n        console.log({recipient, text, sender});\n        setConversations(prev => {\n            let matchConversation = false;\n            //each message just need the sender and the text content\n            const newMessage = {sender, text};\n            let newConversations = conversations.map((conver) => {\n                if (matchRecipient(conver.selectedUser, recipient)){\n                    matchConversation = true;\n                    return {...conver, message: [...conver.message, newMessage]}\n                }\n                return conver;\n            })\n            if (matchConversation){\n                return newConversations;\n            }\n            else{\n                return [...prev, {selectedUser: recipient, message: [newMessage]}]\n            }\n        })\n    }, [conversations, setConversations])\n    \n    //to control when to trigger socket on receive-message event\n    useEffect(() => {\n        if (socket == null) return;\n        socket.on('receive-message', addMessageToConversation);\n        console.log(conversations);              \n        return () => {\n            //remove all listeners in this receive-message event\n            socket.off('receive-message');\n        };\n    }, [socket, addMessageToConversation]);\n\n    const sendMessage = (recipient,text) => {\n        socket.emit('send-message', {recipient, text});\n        addMessageToConversation({recipient, text, sender: id});\n    }\n\n    //the final value that ConversationContext.Provider holds\n    const output = {\n        //all conversations\n        conversations: formatConversations, \n        //one selected conversation \n        selectedConversation: formatConversations[selectedConversationIndex], \n        //change the selected conversation\n        setSelectedConversationIndex, \n        //create new conversation\n        createConversation,\n        //to store a message to the conversation\n        sendMessage\n    }\n\n    return (\n        <ConversationContext.Provider value={output}>\n            {children}\n        </ConversationContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}