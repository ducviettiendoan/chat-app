{"ast":null,"code":"var _jsxFileName = \"/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Form, InputGroup, Button } from 'react-bootstrap';\nimport { useConversation } from './contexts/ConversationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentConversation(props) {\n  _s();\n\n  const cons = useConversation();\n  const [textMessage, setTextMessage] = useState(\"\");\n  const latestMessage = useRef(); //newMessage is for useEffect => call useEffect only when newMessage val changes\n\n  const [newMessage, setNewMessage] = useState(false);\n\n  const handleChangeMessage = e => {\n    setTextMessage(e.target.value);\n  };\n\n  const handleSendMessage = e => {\n    console.log(textMessage);\n    e.preventDefault();\n\n    if (textMessage.trim().length > 0) {\n      cons.sendMessage(cons.selectedConversation.recipient.map(user => {\n        return user.id;\n      }), textMessage);\n      setNewMessage(prev => !prev);\n      console.log(\"Sent\");\n    }\n\n    setTextMessage(\"\");\n  }; // useEffect(()=>{\n  //     if (latestMessage){\n  //         latestMessage.current.scrollIntoView();\n  //     }\n  // },[newMessage]);\n\n\n  console.log(cons);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-100 d-flex flex-column justify-content-end flex-grow-1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-auto flex-grow-1 d-flex justify-content-end\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `d-flex flex-column align-items-start justify-content-end px-3`,\n        children: cons.selectedConversation.message.map((mes, index) => {\n          // const newMessage = cons.selectedConversation.message.length - 1 === index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `d-flex flex-column ${mes.fromMe ? 'align-items-end' : 'align-items-start'} mb-2 w-100`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${mes.fromMe ? 'rounded bg-primary text-white p-2' : 'rounded bg-light p-2'}`,\n              children: mes.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: mes.fromMe ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#A49E98'\n                },\n                children: \"You\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: '#A49E98'\n                },\n                children: mes.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSendMessage,\n      className: \"p-3\",\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            required: true,\n            value: textMessage,\n            onChange: handleChangeMessage,\n            style: {\n              height: \"75px\",\n              resize: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            onClick: handleSendMessage,\n            style: {\n              fontWeight: 700\n            },\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CurrentConversation, \"TcCaBW+a/T6D/WGSjig0lz17rjc=\", false, function () {\n  return [useConversation];\n});\n\n_c = CurrentConversation;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentConversation\");","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx"],"names":["React","useState","useRef","useEffect","Form","InputGroup","Button","useConversation","CurrentConversation","props","cons","textMessage","setTextMessage","latestMessage","newMessage","setNewMessage","handleChangeMessage","e","target","value","handleSendMessage","console","log","preventDefault","trim","length","sendMessage","selectedConversation","recipient","map","user","id","prev","message","mes","index","fromMe","text","color","senderName","height","resize","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,EAAiCC,SAAjC,QAAiD,OAAjD;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B,QAAyC,iBAAzC;AACA,SAASC,eAAT,QAAgC,iCAAhC;;AAEA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAC/C,QAAMC,IAAI,GAAGH,eAAe,EAA5B;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMY,aAAa,GAAGX,MAAM,EAA5B,CAH+C,CAI/C;;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;;AACA,QAAMe,mBAAmB,GAAIC,CAAD,IAAO;AAC/BL,IAAAA,cAAc,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACH,GAFD;;AAGA,QAAMC,iBAAiB,GAAIH,CAAD,IAAO;AAC7BI,IAAAA,OAAO,CAACC,GAAR,CAAYX,WAAZ;AACAM,IAAAA,CAAC,CAACM,cAAF;;AACA,QAAIZ,WAAW,CAACa,IAAZ,GAAmBC,MAAnB,GAA4B,CAAhC,EAAkC;AAC9Bf,MAAAA,IAAI,CAACgB,WAAL,CAAiBhB,IAAI,CAACiB,oBAAL,CAA0BC,SAA1B,CAAoCC,GAApC,CAAyCC,IAAD,IAAS;AAAC,eAAOA,IAAI,CAACC,EAAZ;AAAe,OAAjE,CAAjB,EAAqFpB,WAArF;AACAI,MAAAA,aAAa,CAACiB,IAAI,IAAI,CAACA,IAAV,CAAb;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AACDV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GATD,CAT+C,CAoB/C;AACA;AACA;AACA;AACA;;;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,0DAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,sDAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAG,+DAAjB;AAAA,kBACKA,IAAI,CAACiB,oBAAL,CAA0BM,OAA1B,CAAkCJ,GAAlC,CAAsC,CAACK,GAAD,EAAMC,KAAN,KAAgB;AACnD;AACA,8BACI;AAGI,YAAA,SAAS,EAAG,sBAAqBD,GAAG,CAACE,MAAJ,GAAa,iBAAb,GAAiC,mBAAoB,aAH1F;AAAA,oCAKI;AAAK,cAAA,SAAS,EAAG,GAAEF,GAAG,CAACE,MAAJ,GAAY,mCAAZ,GAAgD,sBAAuB,EAA1F;AAAA,wBAA8FF,GAAG,CAACG;AAAlG;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMQ;AAAA,wBAAMH,GAAG,CAACE,MAAJ,gBACF;AAAM,gBAAA,KAAK,EAAE;AAACE,kBAAAA,KAAK,EAAE;AAAR,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADE,gBAGF;AAAM,gBAAA,KAAK,EAAE;AAACA,kBAAAA,KAAK,EAAE;AAAR,iBAAb;AAAA,0BAAkCJ,GAAG,CAACK;AAAtC;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,oBANR;AAAA,aAESJ,KAFT;AAAA;AAAA;AAAA;AAAA,kBADJ;AAcH,SAhBA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAsBI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEf,iBAAhB;AAAmC,MAAA,SAAS,EAAC,KAA7C;AAAA,6BACI,QAAC,IAAD,CAAM,KAAN;AAAA,+BACI,QAAC,UAAD;AAAA,kCACI,QAAC,IAAD,CAAM,OAAN;AACI,YAAA,EAAE,EAAC,UADP;AAEI,YAAA,QAAQ,MAFZ;AAGI,YAAA,KAAK,EAAET,WAHX;AAII,YAAA,QAAQ,EAAEK,mBAJd;AAKI,YAAA,KAAK,EAAE;AAACwB,cAAAA,MAAM,EAAE,MAAT;AAAiBC,cAAAA,MAAM,EAAC;AAAxB;AALX;AAAA;AAAA;AAAA;AAAA,kBADJ,eAQI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAC,SAA9B;AAAwC,YAAA,OAAO,EAAErB,iBAAjD;AAAoE,YAAA,KAAK,EAAE;AAACsB,cAAAA,UAAU,EAAE;AAAb,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwCH;;GAnEuBlC,mB;UACPD,e;;;KADOC,mB","sourcesContent":["import React, {useState, useRef, useEffect} from 'react';\nimport { Form, InputGroup, Button } from 'react-bootstrap';\nimport { useConversation } from './contexts/ConversationProvider';\n\nexport default function CurrentConversation(props) {\n    const cons = useConversation();\n    const [textMessage, setTextMessage] = useState(\"\");\n    const latestMessage = useRef();\n    //newMessage is for useEffect => call useEffect only when newMessage val changes\n    const [newMessage, setNewMessage] = useState(false); \n    const handleChangeMessage = (e) => {\n        setTextMessage(e.target.value);\n    }\n    const handleSendMessage = (e) => {\n        console.log(textMessage);\n        e.preventDefault();\n        if (textMessage.trim().length > 0){\n            cons.sendMessage(cons.selectedConversation.recipient.map((user)=> {return user.id}), textMessage);\n            setNewMessage(prev => !prev);\n            console.log(\"Sent\");\n        }\n        setTextMessage(\"\");\n    }\n    \n    // useEffect(()=>{\n    //     if (latestMessage){\n    //         latestMessage.current.scrollIntoView();\n    //     }\n    // },[newMessage]);\n\n    console.log(cons);\n    return (\n        <div className=\"w-100 d-flex flex-column justify-content-end flex-grow-1\">\n            <div className=\"overflow-auto flex-grow-1 d-flex justify-content-end\">\n                <div className={`d-flex flex-column align-items-start justify-content-end px-3`}>\n                    {cons.selectedConversation.message.map((mes, index) => {\n                        // const newMessage = cons.selectedConversation.message.length - 1 === index;\n                        return (\n                            <div \n                                // ref={newMessage ? latestMessage : null}\n                                key={index}\n                                className={`d-flex flex-column ${mes.fromMe ? 'align-items-end' : 'align-items-start'} mb-2 w-100`}\n                            >\n                                <div className={`${mes.fromMe ?'rounded bg-primary text-white p-2':'rounded bg-light p-2'}`}>{mes.text}</div>\n                                    <div>{mes.fromMe ? \n                                        <span style={{color: '#A49E98'}}>You</span>\n                                        : \n                                        <span style={{color: '#A49E98'}}>{mes.senderName}</span>}\n                                    </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <Form onSubmit={handleSendMessage} className='p-3'>\n                <Form.Group>\n                    <InputGroup>\n                        <Form.Control\n                            as=\"textarea\"\n                            required\n                            value={textMessage}\n                            onChange={handleChangeMessage}\n                            style={{height: \"75px\", resize:\"none\"}}\n                        />\n                        <Button type=\"submit\" variant='primary' onClick={handleSendMessage} style={{fontWeight: 700}}>Send</Button>\n                    </InputGroup>\n                    \n                </Form.Group>\n            </Form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}