[{"/Users/ducdoan2002/Desktop/chat-app/client/src/index.js":"1","/Users/ducdoan2002/Desktop/chat-app/client/src/components/App.jsx":"2","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Login.jsx":"3","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Dashboard.jsx":"4","/Users/ducdoan2002/Desktop/chat-app/client/src/customHooks/useLocalStorage.js":"5","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Sidebar.jsx":"6","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Conversations.jsx":"7","/Users/ducdoan2002/Desktop/chat-app/client/src/components/Contact.jsx":"8","/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx":"9","/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ConversationModal.jsx":"10","/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ContactModal.jsx":"11","/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx":"12","/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx":"13"},{"size":276,"mtime":1648270627654,"results":"14","hashOfConfig":"15"},{"size":753,"mtime":1652976459185,"results":"16","hashOfConfig":"15"},{"size":1291,"mtime":1652414541404,"results":"17","hashOfConfig":"15"},{"size":556,"mtime":1653085340572,"results":"18","hashOfConfig":"15"},{"size":1375,"mtime":1652596853540,"results":"19","hashOfConfig":"15"},{"size":2463,"mtime":1653085627545,"results":"20","hashOfConfig":"15"},{"size":791,"mtime":1652931565227,"results":"21","hashOfConfig":"15"},{"size":431,"mtime":1652931580980,"results":"22","hashOfConfig":"15"},{"size":701,"mtime":1652595169582,"results":"23","hashOfConfig":"15"},{"size":1557,"mtime":1652973422134,"results":"24","hashOfConfig":"15"},{"size":1316,"mtime":1652671007153,"results":"25","hashOfConfig":"15"},{"size":4065,"mtime":1653081385036,"results":"26","hashOfConfig":"15"},{"size":2406,"mtime":1653084967789,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"149u5cd",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Users/ducdoan2002/Desktop/chat-app/client/src/index.js",[],[],["78","79"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/App.jsx",["80"],[],"import React, {useState} from 'react';\nimport Login from \"./Login\";\nimport Dashboard from './Dashboard';\nimport useLocalStorage from '../customHooks/useLocalStorage';\nimport ContactsProvider from './contexts/ContactsProvider';\nimport ConversationProvider from './contexts/ConversationProvider';\n\n\nfunction App() {\n  //store the id value for now the uuidV4 random id\n  const [id, setId] = useLocalStorage('id');\n  console.log(id); \n  return (\n    <div className=\"App\">\n      {id ? <ContactsProvider>\n              <ConversationProvider id={id}>\n                <Dashboard id={id}/>\n              </ConversationProvider>\n            </ContactsProvider>\n          : \n            <Login onIdSubmit = {setId}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n",["81","82"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Login.jsx",["83"],[],"import React, {useRef, useEffect} from 'react';\nimport {Button, Container, Form} from \"react-bootstrap\";\nimport {v4 as uuidV4} from 'uuid';\n\nexport default function Login(props) {\n  const userId = useRef();\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   //value from Form.Control\n  //   props.onIdSubmit(userId.current.value);\n  //   console.log(\"Submit\");\n  // }\n\n  const createId = () => {\n    props.onIdSubmit(uuidV4());\n  }\n  return (\n    <Container className=\"d-flex align-items-center justify-content-center\" style={{height: \"100vh\"}}>\n        <Form /*onSubmit={handleSubmit}*/>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>ID</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter ID\" ref = {userId}/>\n                <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n                </Form.Text>\n            </Form.Group>\n            {/* uncomment type = submit to submit the form + trigger onSubmit */}\n            <Button /*type=\"submit\"*/ className=\"me-2\">\n              Log In\n            </Button>\n            <Button variant=\"secondary\" onClick={createId}>\n              Create a new account\n            </Button>\n        </Form>\n    </Container>\n  )\n}\n",["84","85"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Dashboard.jsx",[],[],["86","87"],"/Users/ducdoan2002/Desktop/chat-app/client/src/customHooks/useLocalStorage.js",["88"],[],"import React, {useEffect, useState} from 'react'\n\nconst PREFIX = \"chat-app-clone-\";\n/*\n    useLocalStorage is a custom Hook of useState\n*/\n//key is where the thing you store in localStorange. (to put it to the prefixKey -> find the correct value)\n//initialValue is the parameter that you pass to useState (could be as a function or just a variable)\n\nexport default function useLocalStorage(key, initialValue) {\n    //read from localStorage + store data to our state\n    let prefixKey = PREFIX + key;\n    const [value, setValue] = useState(()=>{\n        //get the value on localStorage \n        const jsonVal = localStorage.getItem(prefixKey);\n        //every return below are all for set the value [value, setValue] initially\n        if (jsonVal != null){\n            return JSON.parse(jsonVal);         \n        }\n        //passing function to initialValue (useState(()=>{})) \n        if (typeof(initialValue) === \"function\"){\n            return initialValue();\n        }else{\n            return initialValue;\n        }\n    });\n\n    //get value(state) and save to the localStorage\n    useEffect(()=>{\n        //set the value you want to store to localStorage\n        if (value){\n            //stringify here to make JS becomes JSON data\n            localStorage.setItem(prefixKey, JSON.stringify(value));\n        }\n    }, [prefixKey,value])\n\n    return [value, setValue];\n}\n",["89","90"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Sidebar.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Conversations.jsx",[],[],["91","92"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/Contact.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ContactsProvider.jsx",[],[],["93","94"],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ConversationModal.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/modal/ContactModal.jsx",[],[],"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx",["95","96"],[],"import React, {useContext} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationContext = React.createContext();\n\n//small custom Hook\nexport const useConversation = () => {\n    return useContext(ConversationContext);\n}\n\nexport default function ConversationProvider({id, children}) {\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = React.useState(0);\n    //storing a new Contact the the state contacts\n    const createConversation = (selectedUser) => {\n        setConversations(prev => [...prev, {selectedUser, message: []}]);\n    }\n    const allContacts = useContacts();\n\n    //add new recipient property to each conversation in conversations\n    const formatConversations = conversations.map((conver, index)=>{\n        //format the contact to display on the page\n        const recipient = conver.selectedUser.map((user)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === user){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : contact.id;\n            return {id: contact.id, username: name};\n        })\n        //format the message to display on the page (add fromMe + senderName props to each message object)\n        const formatMessage = conver.message.map((mes)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === mes.sender){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : mes.sender;\n            const fromMe = (mes.sender === id);\n            return {...mes, senderName: name, fromMe};\n        })\n        //update old form message to new formatMessage\n        conver.message = formatMessage;\n        let selected = (index === selectedConversationIndex);\n        return {...conver, recipient, selected};\n    });\n\n    //ultility:\n    const matchRecipient = (arr1, arr2) => {\n        arr1.sort();\n        arr2.sort();\n        if (arr1.length !== arr2.length){\n            return false;\n        }\n        for (let i = 0; i<arr1.length; i++){\n            if (arr1[i] !== arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const addMessageToConversation = ({recipient, text, sender}) => {\n        //recipient = a list of user Id, text = text input,sender = user with current Id\n        setConversations(prev => {\n            let matchConversation = false;\n            //each message just need the sender and the text content\n            const newMessage = {sender, text};\n            let newConversations = conversations.map((conver) => {\n                if (matchRecipient(conver.selectedUser, recipient)){\n                    matchConversation = true;\n                    return {...conver, message: [...conver.message, newMessage]}\n                }\n                return conver;\n            })\n            if (matchConversation){\n                return newConversations;\n            }\n            else{\n                return [...prev, {recipient, message: [newMessage]}]\n            }\n        })\n    }\n\n    const sendMessage = (recipient,text) => {\n        addMessageToConversation({recipient, text, sender: id});\n    }\n\n    //the final value that ConversationContext.Provider holds\n    const output = {\n        //all conversations\n        conversations: formatConversations, \n        //one selected conversation \n        selectedConversation: formatConversations[selectedConversationIndex], \n        //change the selected conversation\n        setSelectedConversationIndex, \n        //create new conversation\n        createConversation,\n        //to store a message to the conversation\n        sendMessage\n    }\n\n    return (\n        <ConversationContext.Provider value={output}>\n            {children}\n        </ConversationContext.Provider>\n    )\n}\n","/Users/ducdoan2002/Desktop/chat-app/client/src/components/CurrentConversation.jsx",[],[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":16,"nodeType":"103","messageId":"104","endLine":1,"endColumn":24},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"101","severity":1,"message":"107","line":1,"column":24,"nodeType":"103","messageId":"104","endLine":1,"endColumn":33},{"ruleId":"97","replacedBy":"108"},{"ruleId":"99","replacedBy":"109"},{"ruleId":"97","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},{"ruleId":"101","severity":1,"message":"112","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"97","replacedBy":"113"},{"ruleId":"99","replacedBy":"114"},{"ruleId":"97","replacedBy":"115"},{"ruleId":"99","replacedBy":"116"},{"ruleId":"97","replacedBy":"117"},{"ruleId":"99","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":25,"column":63,"nodeType":"121","messageId":"122","endLine":25,"endColumn":65},{"ruleId":"119","severity":1,"message":"120","line":35,"column":63,"nodeType":"121","messageId":"122","endLine":35,"endColumn":65},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["123"],["124"],"'useEffect' is defined but never used.",["123"],["124"],["123"],["124"],"'React' is defined but never used.",["123"],["124"],["123"],["124"],["123"],["124"],"array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]