{"ast":null,"code":"var _jsxFileName = \"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationContext = /*#__PURE__*/React.createContext(); //small custom Hook\n\nexport const useConversation = () => {\n  _s();\n\n  return useContext(ConversationContext);\n};\n\n_s(useConversation, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ConversationProvider(_ref) {\n  _s2();\n\n  let {\n    id,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = React.useState(0); //storing a new Contact the the state contacts\n\n  const createConversation = selectedUser => {\n    setConversations(prev => [...prev, {\n      selectedUser,\n      message: []\n    }]);\n  };\n\n  const allContacts = useContacts(); //add new recipient property to each conversation in conversations\n\n  const formatConversations = conversations.map((conver, index) => {\n    const recipient = conver.selectedUser.map(user => {\n      const contact = allContacts.contacts.find(contact => {\n        if (contact.id === user) {\n          return contact;\n        }\n\n        ;\n      });\n      const name = contact ? contact.username : contact.id;\n      return {\n        id: contact.id,\n        username: name\n      };\n    });\n    let selected = index === selectedConversationIndex;\n    return { ...conver,\n      recipient,\n      selected\n    };\n  }); //ultility:\n\n  const matchRecipient = (arr1, arr2) => {\n    // arr1.sort();\n    arr2.sort();\n\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const addMessageToConversation = _ref2 => {\n    let {\n      recipient,\n      text,\n      sender\n    } = _ref2;\n    //recipient = a list of user Id, text = text input,sender = user with current Id\n    setConversations(prev => {\n      let matchConversation = false; //each message just need the sender and the text content\n\n      const newMessage = {\n        sender,\n        text\n      };\n      let newConversations = conversations.map(conver => {\n        if (matchRecipient(conver.selectedUser, recipient)) {\n          matchConversation = true;\n          return { ...conver,\n            message: [...conver.message, newMessage]\n          };\n        }\n\n        return conver;\n      });\n\n      if (matchConversation) {\n        return newConversations;\n      } else {\n        return [...prev, {\n          recipient,\n          message: [newMessage]\n        }];\n      }\n    });\n  };\n\n  const sendMessage = (recipient, text) => {\n    console.log(recipient, text);\n    addMessageToConversation({\n      recipient,\n      text,\n      sender: id\n    });\n  }; //the final value that ConversationContext.Provider holds\n\n\n  const output = {\n    //all conversations\n    conversations: formatConversations,\n    //one selected conversation \n    selectedConversation: formatConversations[selectedConversationIndex],\n    //change the selected conversation\n    setSelectedConversationIndex,\n    //create new conversation\n    createConversation,\n    //to store a message to the conversation\n    sendMessage\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationContext.Provider, {\n    value: output,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationProvider, \"blNOxgXYhsk88g19mzILmlAnq4c=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx"],"names":["React","useContext","useLocalStorage","useContacts","ConversationContext","createContext","useConversation","ConversationProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","useState","createConversation","selectedUser","prev","message","allContacts","formatConversations","map","conver","index","recipient","user","contact","contacts","find","name","username","selected","matchRecipient","arr1","arr2","sort","length","i","addMessageToConversation","text","sender","matchConversation","newMessage","newConversations","sendMessage","console","log","output","selectedConversation"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationContext = React.createContext();\n\n//small custom Hook\nexport const useConversation = () => {\n    return useContext(ConversationContext);\n}\n\n\nexport default function ConversationProvider({id, children}) {\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    const [selectedConversationIndex, setSelectedConversationIndex] = React.useState(0);\n    //storing a new Contact the the state contacts\n    const createConversation = (selectedUser) => {\n        setConversations(prev => [...prev, {selectedUser, message: []}]);\n    }\n    const allContacts = useContacts();\n\n    //add new recipient property to each conversation in conversations\n    const formatConversations = conversations.map((conver, index)=>{\n        const recipient = conver.selectedUser.map((user)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === user){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : contact.id;\n            return {id: contact.id, username: name};\n        })\n        let selected = (index === selectedConversationIndex);\n        return {...conver, recipient, selected};\n    });\n\n    //ultility:\n    const matchRecipient = (arr1, arr2) => {\n        // arr1.sort();\n        arr2.sort();\n        if (arr1.length !== arr2.length){\n            return false;\n        }\n        for (let i = 0; i<arr1.length; i++){\n            if (arr1[i] !== arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const addMessageToConversation = ({recipient, text, sender}) => {\n        //recipient = a list of user Id, text = text input,sender = user with current Id\n        setConversations(prev => {\n            let matchConversation = false;\n            //each message just need the sender and the text content\n            const newMessage = {sender, text};\n            let newConversations = conversations.map((conver) => {\n                if (matchRecipient(conver.selectedUser, recipient)){\n                    matchConversation = true;\n                    return {...conver, message: [...conver.message, newMessage]}\n                }\n                return conver;\n            })\n            if (matchConversation){\n                return newConversations;\n            }\n            else{\n                return [...prev, {recipient, message: [newMessage]}]\n            }\n        })\n    }\n\n    const sendMessage = (recipient,text) => {\n        console.log(recipient, text);\n        addMessageToConversation({recipient, text, sender: id});\n    }\n\n    //the final value that ConversationContext.Provider holds\n    const output = {\n        //all conversations\n        conversations: formatConversations, \n        //one selected conversation \n        selectedConversation: formatConversations[selectedConversationIndex], \n        //change the selected conversation\n        setSelectedConversationIndex, \n        //create new conversation\n        createConversation,\n        //to store a message to the conversation\n        sendMessage\n    }\n\n    return (\n        <ConversationContext.Provider value={output}>\n            {children}\n        </ConversationContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}