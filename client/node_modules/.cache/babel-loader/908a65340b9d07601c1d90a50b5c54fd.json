{"ast":null,"code":"import _slicedToArray from\"/Users/ducdoan2002/Desktop/chat-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';var PREFIX=\"chat-app-clone-\";/*\n    useLocalStorage is a custom Hook of useState\n*/ //key is where the thing you store in localStorange. (to put it to the prefixKey -> find the correct value)\n//initialValue is the parameter that you pass to useState (could be as a function or just a variable)\nexport default function useLocalStorage(key,initialValue){//read from localStorage + store data to our state\nvar prefixKey=PREFIX+key;var _useState=useState(function(){//get the value on localStorage \nvar jsonVal=localStorage.getItem(prefixKey);//every return below are all for set the value [value, setValue] initially\n//every return below are all for set the value [value, setValue] initially\nif(jsonVal!=null){return JSON.parse(jsonVal);}//passing function to initialValue (useState(()=>{})) \n//passing function to initialValue (useState(()=>{})) \nif(typeof initialValue===\"function\"){return initialValue();}else{return initialValue;}}),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];//get value(state) and save to the localStorage\nuseEffect(function(){//set the value you want to store to localStorage\nif(value){//stringify here to make JS becomes JSON data\nlocalStorage.setItem(prefixKey,JSON.stringify(value));}},[prefixKey,value]);return[value,setValue];}","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/customHooks/useLocalStorage.js"],"names":["React","useEffect","useState","PREFIX","useLocalStorage","key","initialValue","prefixKey","jsonVal","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify"],"mappings":"gIAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CAEA,GAAMC,CAAAA,MAAM,CAAG,iBAAf,CACA;AACA;AACA,E,CACA;AACA;AAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAA8BC,YAA9B,CAA4C,CACvD;AACA,GAAIC,CAAAA,SAAS,CAAGJ,MAAM,CAAGE,GAAzB,CACA,cAA0BH,QAAQ,CAAC,UAAI,CACnC;AACA,GAAMM,CAAAA,OAAO,CAAGC,YAAY,CAACC,OAAb,CAAqBH,SAArB,CAAhB,CACA;AAAA;AACA,GAAIC,OAAO,EAAI,IAAf,CAAoB,CAChB,MAAOG,CAAAA,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAP,CACH,CACD;AAAA;AACA,GAAI,MAAOF,CAAAA,YAAP,GAAyB,UAA7B,CAAwC,CACpC,MAAOA,CAAAA,YAAY,EAAnB,CACH,CAFD,IAEK,CACD,MAAOA,CAAAA,YAAP,CACH,CACJ,CAbiC,CAAlC,wCAAOO,KAAP,eAAcC,QAAd,eAeA;AACAb,SAAS,CAAC,UAAI,CACV;AACA,GAAIY,KAAJ,CAAU,CACN;AACAJ,YAAY,CAACM,OAAb,CAAqBR,SAArB,CAAgCI,IAAI,CAACK,SAAL,CAAeH,KAAf,CAAhC,EACH,CACJ,CANQ,CAMN,CAACN,SAAD,CAAWM,KAAX,CANM,CAAT,CAQA,MAAO,CAACA,KAAD,CAAQC,QAAR,CAAP,CACH","sourcesContent":["import React, {useEffect, useState} from 'react'\n\nconst PREFIX = \"chat-app-clone-\";\n/*\n    useLocalStorage is a custom Hook of useState\n*/\n//key is where the thing you store in localStorange. (to put it to the prefixKey -> find the correct value)\n//initialValue is the parameter that you pass to useState (could be as a function or just a variable)\n\nexport default function useLocalStorage(key, initialValue) {\n    //read from localStorage + store data to our state\n    let prefixKey = PREFIX + key;\n    const [value, setValue] = useState(()=>{\n        //get the value on localStorage \n        const jsonVal = localStorage.getItem(prefixKey);\n        //every return below are all for set the value [value, setValue] initially\n        if (jsonVal != null){\n            return JSON.parse(jsonVal);         \n        }\n        //passing function to initialValue (useState(()=>{})) \n        if (typeof(initialValue) === \"function\"){\n            return initialValue();\n        }else{\n            return initialValue;\n        }\n    });\n\n    //get value(state) and save to the localStorage\n    useEffect(()=>{\n        //set the value you want to store to localStorage\n        if (value){\n            //stringify here to make JS becomes JSON data\n            localStorage.setItem(prefixKey, JSON.stringify(value));\n        }\n    }, [prefixKey,value])\n\n    return [value, setValue];\n}\n"]},"metadata":{},"sourceType":"module"}