{"ast":null,"code":"var _jsxFileName = \"/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationContext = /*#__PURE__*/React.createContext(); //small custom Hook\n\nexport const useConversation = () => {\n  _s();\n\n  return useContext(ConversationContext);\n};\n\n_s(useConversation, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default function ConversationProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []); //storing a new Contact the the state contacts\n\n  const createConversation = selectedUser => {\n    setConversations(prev => [...prev, {\n      selectedUser,\n      message: []\n    }]);\n  };\n\n  const allContacts = useContacts(); //add new recipient property to each conversation in conversations\n\n  const formatConversations = conversations.map(conver => {\n    const recipient = conver.selectedUser.map(user => {\n      const contact = allContacts.contacts.find(contact => {\n        if (contact.id === user) {\n          return contact;\n        }\n\n        ;\n      });\n      const name = contact ? contact.username : contact.id;\n      return {\n        id: contact.id,\n        username: name\n      };\n    });\n    return { ...conver,\n      recipient\n    };\n  }); //the final value that ConversationContext.Provider holds\n\n  const output = {\n    conversations: formatConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationContext.Provider, {\n    value: output,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationProvider, \"YWkiYKYr/yDj+RCblLyY4qU1Scg=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"sources":["/Users/ducdoan2002/Desktop/chat-app/client/src/components/contexts/ConversationProvider.jsx"],"names":["React","useContext","useLocalStorage","useContacts","ConversationContext","createContext","useConversation","ConversationProvider","children","conversations","setConversations","createConversation","selectedUser","prev","message","allContacts","formatConversations","map","conver","recipient","user","contact","contacts","find","id","name","username","output"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,mBAAmB,gBAAGJ,KAAK,CAACK,aAAN,EAA5B,C,CAEA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,SAAOL,UAAU,CAACG,mBAAD,CAAjB;AACH,CAFM;;GAAME,e;;AAKb,eAAe,SAASC,oBAAT,OAA0C;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AACrD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CAAC,eAAD,EAAkB,EAAlB,CAAzD,CADqD,CAErD;;AACA,QAAMS,kBAAkB,GAAIC,YAAD,IAAkB;AACzCF,IAAAA,gBAAgB,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU;AAACD,MAAAA,YAAD;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAAV,CAAT,CAAhB;AACH,GAFD;;AAGA,QAAMC,WAAW,GAAGZ,WAAW,EAA/B,CANqD,CAQrD;;AACA,QAAMa,mBAAmB,GAAGP,aAAa,CAACQ,GAAd,CAAmBC,MAAD,IAAU;AACpD,UAAMC,SAAS,GAAGD,MAAM,CAACN,YAAP,CAAoBK,GAApB,CAAyBG,IAAD,IAAQ;AAC9C,YAAMC,OAAO,GAAGN,WAAW,CAACO,QAAZ,CAAqBC,IAArB,CAA0BF,OAAO,IAAI;AACjD,YAAIA,OAAO,CAACG,EAAR,KAAeJ,IAAnB,EAAwB;AACpB,iBAAOC,OAAP;AACH;;AAAA;AACJ,OAJe,CAAhB;AAKA,YAAMI,IAAI,GAAGJ,OAAO,GAAIA,OAAO,CAACK,QAAZ,GAAuBL,OAAO,CAACG,EAAnD;AACA,aAAO;AAACA,QAAAA,EAAE,EAAEH,OAAO,CAACG,EAAb;AAAiBE,QAAAA,QAAQ,EAAED;AAA3B,OAAP;AACH,KARiB,CAAlB;AASA,WAAO,EAAC,GAAGP,MAAJ;AAAYC,MAAAA;AAAZ,KAAP;AACH,GAX2B,CAA5B,CATqD,CAsBrD;;AACA,QAAMQ,MAAM,GAAG;AAAClB,IAAAA,aAAa,EAAEO,mBAAhB;AAAqCL,IAAAA;AAArC,GAAf;AAEA,sBACI,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEgB,MAArC;AAAA,cACKnB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IA9BuBD,oB;UACsBL,e,EAKtBC,W;;;KANAI,oB","sourcesContent":["import React, {useContext} from 'react';\nimport useLocalStorage from '../../customHooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\n\nconst ConversationContext = React.createContext();\n\n//small custom Hook\nexport const useConversation = () => {\n    return useContext(ConversationContext);\n}\n\n\nexport default function ConversationProvider({children}) {\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n    //storing a new Contact the the state contacts\n    const createConversation = (selectedUser) => {\n        setConversations(prev => [...prev, {selectedUser, message: []}]);\n    }\n    const allContacts = useContacts();\n\n    //add new recipient property to each conversation in conversations\n    const formatConversations = conversations.map((conver)=>{\n        const recipient = conver.selectedUser.map((user)=>{\n            const contact = allContacts.contacts.find(contact => {\n                if (contact.id === user){\n                    return contact;\n                };\n            })\n            const name = contact ?  contact.username : contact.id;\n            return {id: contact.id, username: name};\n        })\n        return {...conver, recipient};\n    });\n\n    //the final value that ConversationContext.Provider holds\n    const output = {conversations: formatConversations, createConversation, }\n\n    return (\n        <ConversationContext.Provider value={output}>\n            {children}\n        </ConversationContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}